========Projektbeschreibung 22.04.2016=========
Ausgangsspiel ist "Die goldene Stadt".
Drei bis vier Spieler schlüpfen in die Rolle eben dieser Händler und Abenteurer und versuchen, sich den Weg von den Anlegestellen 
der Schiffe ins Innere der Insel und anschließend weiter ins Herz der Goldenen Stadt zu bahnen. Auf ihrem Weg müssen sie
Handelshäuser errichten um Waren einzutauschen, Geld zu erhandeln oder gar einen Schlüssel für die Tore der Goldenen Stadt zu erhalten.
Es werden maximal 16 Runden gespielt, denn das Spiel endet, wenn entweder alle Wertungskarten ausgespielt wurden oder ein Spieler alle 
seine Handelshäuser auf dem Spielbrett platzieren konnte. Wer am Ende des Spieles die meisten Handelsbriefe vorweisen kann, gewinnt.

﻿=== Projektidee mansara, 2016-04-05 ===

Es gibt ein Spiel Namens “Mafia”
Das Spiel geht im Regime der realen Zeit. 
Die Ergebnisse werden vom Moderator des Spieles eingetragen.

Die Funktionen:
Die Einführung und die Erhaltung der Namen der Spieler.
Indikation und Speicherung des Spielergebnisses.

Der Anfang des Spieles
Auswahl 10 Spieler aus der Liste für das Spiel.
Verteilung der Rolle für jeden Spieler.
Aufteilung in zwei Mannschaften: roten und schwarzen.
Zwei Phasen: der Tag und die Nacht. Sie kann man umschalten.

Die Tag-Phase: es arbeitet die Schaltuhr bis 1 Minute, den man jeder Zeit wieder anlaufen kann. 
           Foul: Es gibt der Knopf für die Fouls bei jedem Spieler, nach dem dritten Druck  flammt rot-auf, nach dem 4. wird der Spieler aus dem Spiel entfernt.
            Den Spieler kann man für die Abstimmung nominieren. Die nominierten Spieler werden im speziellen Fenster dargestellt. Gegenüber jeden Spieler wird die Anzahl der Stimmen, die gegen ihn abgegeben wurden, dargestellt.

Wer am meisten Stimmen erhalten hat, verlässt das Spiel.
Bei gleichen Stimmenverteilung gibt es zusätzliche Abstimmung zwischen entsprechenden Spilern.

Die Nacht-Phase:
Es wird der Spieler gewählt, den die Mafia entfernt
Es wird der Spieler markiert,, wessen Rolle prüfen.

Die Bedingungen des Spielendes
Für Schwarzen: Die Zahl der Roten = die Zahl der Schwarzen
Für Roten: Es gibt keine Schwarze

Beim Sieg des Schwarzen - jeder Schwarze kriegt 2 Points, jeder Rote bekommt 0 Points
Beim Sieg des Roten - jeder Rote kriegt 2 Points, Schwarze bekommt 0 Points

Es gibt die Möglichkeit, den zusätzlichen Point manuell einzugeben.

=== Feedback Alpers, 2016-04-15 ===

Ein formaler Hinweis vorweg: Sie sollten diese Datei im Verzeichnis Dokumentation innerhalb Ihres Repositories speichern (siehe Beschreibung Kap. 5). Dummerweise haben Sie Ihr Repository Dokumentation genannt. Jetzt müssten Sie also innerhalb dieses Repositories noch ein Verzeichnis Dokumentation anlegen und die Datei Projektidee.txt dorthin verschieben. Bitte holen Sie das nach.

Jetzt zum eigentlichen Feedback:

- "Das Spiel geht im Regime der realen Zeit." Was meinen Sie mit diesem Satz?
- Als Funktionen führen Sie auf: "Die Einführung und die Erhaltung der Namen der Spieler." Tut mir leid, aber was meinen Sie damit? Was ist daran eine Funktion? Meinen Sie, dass das Programm einen Text anzeigt und Spieler eingetragen werden können? Das wären keine Funktionen, sondern strukturelle Elemente der Anwendung: Ein Textfeld und ein Formular. (Über Formulare habe ich in Ihrer Gruppe evtl. noch nicht gesprochen. Sie gehören zu HTML.)
- Was meinen Sie mit der Funktion "Indikation des Spielergebnisses"?

Leider tauchen da oben keine eigentlichen Interaktionsmöglichkeiten zwischen Spielern und Spiel auf. Was Sie vorschlagen ist dann eine EVA-Anwendung:
- E wie Eingabe: NutzerIn gibt etwas ein.
- V wie Verarbeitung: Computer verarbeitet die Daten
- A wie Ausgabe: Computer gibt eine Ausgabe aus und damit ist das Programm beendet. Es kann zwar neu gestartet werden, aber die nächste Eingabe ist im Regelfall unabhängig von der aktuellen Ausgabe.

Was Sie dagegen ausarbeiten sollten war eine Projektidee mit verschiedenen Interaktionsmöglichkeiten. Das bedeutet, dass es etwas sein soll, bei dem NutzerInnen Eingaben machen, Schaltflächen anwählen usw. usf. und das Programm reagiert dann darauf in abwechselungsreicher und interessanter Art und Weise. Spiele sind hierfür die anschaulichsten Beispiele.

Im Gegensatz zum oben beschriebenen EVA-Prinzip, das letztlich der Kern sogenannter deterministischer Programme ist, sollen Sie hier eine Idee konzipieren, die sinngemäß so abläuft:
- E wie Eingabe: NutzerInnen geben etwas ein.
- V wie Verarbeitung und A wie Ausgabe: Der Rechner verarbeitet die Eingabe. Ein Teil der Ergebnisse wird als sichtbare Reaktion angezeigt, ein Teil nicht. Stellen Sie sich das wie bei einem Spiel vor: Ihre Mitspieler ziehen mit Figuren, spielen Karten aus, sagen etwas usw. aber es gibt auch Dinge, die Ihre Gegenspieler Ihnen nicht verraten, z.B. eine Strategie oder Karten, die sie noch auf der Hand haben. Bis hierhin ist alles wie beim klassischen EVA-Prinzip.
- R wie Reaktion: Jetzt kommen wir zur eigentlichen Interaktion, also dem gegenseitigen Reagieren auf Ein- und Ausgaben: Durch die Ausgabe des Computers hat sich etwas geändert, z.B. die Position von Figuren auf dem Spielbrett. Also ist die nächste Eingabe des Spielers immer abhängig von der Ausgabe des Computers. Und nachdem der Spieler reagiert hat, reagiert der Computer, dann wieder der Spieler, dann wieder der Computer usw. bis entweder eine Bedingung erreicht ist, die z.B. als Gewinn/Verlust für eine der beiden Seiten bezeichnet wird und durch die die Interaktion beendet wird, oder es gibt eine endlose Abfolge von Reaktionen. Wenn Sie später eine Veranstaltung zu Betriebssystemen besuchen, werden Sie so etwas auch als sogenannten Dialogbetrieb kennen lernen: Eine mehr oder weniger endlose Abfolge von Reaktionen auf Ein- bzw. Ausgaben, die jeweils von einander abhängig sind.

Bitte erstellen Sie deshalb eine Projektbeschreibung, bei der Sie das folgende Spiel als Vorlage nutzen: goldene Stadt http://www.brettspiele-report.de/die-goldene-stadt/

=== Zweiter Aufgabenblock (identisch für alle Studierenden) ===

Sie haben jetzt gezeigt, dass Sie einfache Arbeiten mit einem Git-Repository beherrschen.
Als Teil der letzten Aufgabe sollten Sie beschreiben, was Ihre Anwendung tun soll, also was für Funktionalitäten Ihre Anwendung bieten soll.
Wenn Sie hier nichts angegeben haben, dann werde ich Ihnen einen Vorschlag hochladen, mit dem Sie weiterarbeiten können.
In der Veranstaltung haben Sie außerdem gelernt, was Markup Languages sind.

Die nächste Aufgabe besteht aus den folgenden Teilen:

1.) Lesen Sie mein Feedback durch und setzen Sie die beschriebenen Aufgaben um.

Für die folgende Aufgabe sollten Sie mindestens eine halbe Stunde investieren. Zwei Stunden wäre aber etwas zu viel des guten.
Bearbeiten Sie die Aufgaben 2. und 3. bitte innerhalb von 48 Stunden, weil andere Studierende davon abhängen, dass Sie sie beendet haben.
Bearbeiten Sie die Aufgaben auf jeden Fall in der vorgegebenen Reihenfolge.
Und bearbeiten Sie eine Aufgabe nicht nachträglich nochmal. (Wenn Sie also z.B. Aufgabe 3. bearbeiten, dann ändern Sie bitte nichts an Aufgabe 1. nachträglich ab. Dafür wird später noch genug Zeit sein.)

2.) Bennen Sie die strukturellen Elemente, aus denen Ihre Anwendung bestehen soll.
Es ist dabei egal, ob es diese Elemente in HTML gibt.
Es ist auch egal, ob Sie sich schon in HTML eingearbeitet haben.
Wichtig ist nur, dass Sie die strukturellen Elemente benennen, aus der die Anwendung bestehen soll.
Speichern Sie diese Aufstellung als HTML-Kommentar in einer Datei mit dem Namen

strukt.html

, die Sie in Ihrem Repository abspeichern. Wichtig: Die Datei soll nicht im Unterverzeichnis Dokumentation des Repositories gespeichert werden, weil sie die Basis für das erste HTML-Dokument werden wird.

Wenn Sie noch unsicher sind: Strukturelle Elemente können alles mögliche sein:
- Tabellen
- Listen
- Schaltflächen
- Textfelder
- Bildbereiche
- Hintergrundmusik
- Absätze
- ...

In anderen Worten: Ein strukturelles Element ist etwas, das ein abgegrenzter Teil der Anwendung ist.
Notieren Sie kurz, welche Funktion jedes der von Ihnen genannten Elemente haben soll.

Hier einige Beispiele:
- Schaltfläche (Nutzer können per Klick bestätigen, dass eine Eingabe abgeschickt werden soll.)
- Textfeld für Namen (Nutzer können Ihren Nachnamen eintragen.)
- Log-In-Maske (Bereich, in dem Nutzer sich einloggen können.)
- - Teile der Log-In-Maske:
- - Textfeld für Username
- - Textfeld, das die Eingabe nicht anzeigt, fürs Passwort
- Tabelle, 7 x 5 Felder (Jedes Feld soll ein Bild anzeigen, das ein Feld des Spielbretts ist. Wenn Nutzer ein Feld anwählen, soll ein Menü erscheinen.)
- - Menü für jedes Feld der Tabelle mit Texteinträgen (Eintrag für "Gebäude abreißen", "Feld kaufen")
- Hintergrundbild (Hier sollen einzelne Bilder als Diashow eingeblendet werden.)
- Werbebanner
- Schaltfläche für die Maskierung von NSFW (NSFW = Not safe for work)(NutzerInnen können über diese Schaltfläche eine andere Anwendung in der Vordergrund einblenden lassen, damit der Chef nicht sieht, dass sie gerade spielen.)

3.) Schauen Sie jetzt in der Liste der Repositories (nicht in der Tabelle der Accounts) nach, welche zehn Repositories vor und nach Ihrem Repository aufgeführt sind und geben Sie den Besitzern dieser Repositories Zugriffsrechte auf Ihr Repository.

Bsp.: Sie haben das Repository BerndStromberg. Dann folgen die zehn Repositories der Nutzer BlackWolf63, Cantinaband, CaptainWeasle, ColePfeiffer, CurvLietzau,
DangerDulf, dnbdel, Domsche, Eldinox und Eupuco und vor Ihnen gibt es die fünf Repositories der Nutzer 2238867, amelie-beh, Anger21, anita1997 und Asphalon. all diesen Accounts geben Sie jetzt Zugriffsrechte auf Ihr Repository, so wie Sie das schon für mich getan haben. Wenn Sie, wie BerndStrommberg zu weit am Anfang der Liste stehen (hier gibt es ja nur fünf andere Accounts bis zum Anfang der Liste), dann geben Sie zusätzlich noch den Besitzern der letzten fünf Repositories Zugriffsrechte. Es sollten insgesamt 20 Accounts Zugriffsrecht haben.

Für die nächsten zwei Aufgaben sollten Sie pro Repository zwischen zehn Minuten und einer Stunde aufwenden. Weniger ist zu wenig und mehr ist zu viel.
Beachten Sie dabei bitte, dass Sie hier letzten Endes Kritik an der Arbeit eines/einer anderen üben und das einige von Ihnen noch nie programmiert haben. Arbeiten Sie deshalb bitte daran, alles, was Sie ergänzen so neutral und höflich wie möglich zu formulieren, denn Unwissenheit und mangelndes Verständnis fürs Programmieren sind eben nicht das selbe wie Dummheit oder Faulheit.

Bitte erledigen Sie diese Aufgaben innerhalb der nächsten sieben Tage.

4.) Als nächstes greifen Sie auf die nach Ihrem Repository nachfolgenden fünf Repositories zu und bearbeiten hier die folgende Aufgabe. (Hier hängen Sie also davon ab, dass andere Kommilitonen Aufgabe 3. erledigt haben.) 

Lesen Sie sich die Projektidee durch und machen Sie sich ähnlich wie bei 2. einfache Stichpunkte über strukturelle Elemente, die Sie bei dieser Projektidee sinnvoll finden. (Hier erstmal nur Stichpunkte, Details arbeiten Sie unter 5. aus.)

5.) Öffnen Sie jetzt die Datei strukt.html des Repositories, das Sie gerade bearbeiten. Ergänzen Sie Elemente, die Sie unter 4. notiert haben und die noch nicht eingetragen sind in der unter 2. beschriebenen Form.

Abschließender Hinweis zu 4. und 5.:

Auch wenn das nirgends explizit steht sollen Sie Änderungen in das Repository pushen, aus dem sie die Datei strukt.html gepullt haben.
Es ist dabei sehr wahrscheinlich, dass Sie (vielleicht auch erst später während der Projektbearbeitung) einen merge durchführen müssen. Wenn Sie sich noch nicht angesehen haben, wie das geht, dann tun Sie es jetzt.

Viele Grüße,
Markus Alpers
